---
description: Next.js Spotify App - Project Overview and Development Guidelines
globs: ["**/*"]
alwaysApply: true
---

# Next.js Spotify App - Project Overview

This project uses modular cursor rules organized in the `.cursor/rules` directory.

@import ".cursor/rules/spotify-auth-pkce.mdc"
@import ".cursor/rules/spotify-web-playback-sdk.mdc"
@import ".cursor/rules/rtk-query.mdc"
@import ".cursor/rules/redux-toolkit.mdc"
@import ".cursor/rules/mantine-ui.mdc"
@import ".cursor/rules/nextjs.mdc"

## Available Rules

- **Spotify Authentication (PKCE)**: `.cursor/rules/spotify-auth-pkce.mdc`
- **Spotify Web Playback SDK**: `.cursor/rules/spotify-web-playback-sdk.mdc`
- **RTK Query with TypeScript**: `.cursor/rules/rtk-query.mdc`
- **Redux Toolkit with TypeScript**: `.cursor/rules/redux-toolkit.mdc`
- **Mantine UI with Next.js**: `.cursor/rules/mantine-ui.mdc`
- **Next.js Best Practices**: `.cursor/rules/nextjs.mdc`

## Project Overview

This is a Next.js application that integrates with Spotify Web API and Web Playback SDK. The project uses:

- **Next.js 14+** with App Router
- **TypeScript** for type safety
- **Redux Toolkit** for state management
- **RTK Query** for data fetching
- **Mantine UI** for components
- **Spotify Web API** for music data
- **Spotify Web Playback SDK** for music playback

## Key Patterns

- Use TypeScript for all new code
- Follow Next.js App Router patterns
- Implement proper error handling
- Use Mantine components for UI
- Follow Redux Toolkit best practices
- Implement proper Spotify authentication flow
- Handle server-side rendering correctly

## File Structure

```
src/
├── app/                 # Next.js App Router pages
├── components/          # React components
├── lib/                # Utilities and configurations
│   ├── features/       # Redux slices and features
│   ├── hooks/          # Custom React hooks
│   └── types/          # TypeScript type definitions
└── middleware.ts       # Next.js middleware
```

## Environment Variables

Required environment variables for this project:

```env
# Spotify API
NEXT_PUBLIC_SPOTIFY_CLIENT_ID=your_spotify_client_id
NEXT_PUBLIC_SPOTIFY_REDIRECT_URI=http://127.0.0.1:3000/callback
```

## Development Guidelines

1. Always use TypeScript
2. Follow the established patterns in the rule files
3. Use proper error boundaries and loading states
4. Implement proper authentication flows
5. Test both client and server-side functionality
6. Use Mantine components for consistent UI
7. Follow Redux Toolkit patterns for state management
8. Use environment variables for configuration
9. Implement proper error handling and loading states
10. Follow Next.js App Router conventions
11. Write tests for critical functionality
12. Use proper TypeScript types and interfaces
