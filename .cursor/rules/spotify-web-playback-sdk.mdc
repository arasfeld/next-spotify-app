# Spotify Web Playback SDK

## Overview

The Spotify Web Playback SDK allows you to create a Spotify player within your web application that can stream content alongside other devices in your home. It provides full playback control and real-time state management.

## Prerequisites

- **Spotify Premium Account**: The Web Playback SDK requires a Spotify Premium subscription
- **Spotify App**: Create an app in the Spotify Developer Dashboard
- **Access Token**: Valid access token with appropriate scopes

## Required Scopes

For Web Playback SDK functionality, you need these scopes:

- `streaming` - Control playback on Spotify clients
- `user-read-email` - Read user's email address
- `user-read-private` - Read access to user's private information

## Quick Start Implementation

### 1. HTML Setup

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Spotify Web Playback SDK Quick Start</title>
  </head>
  <body>
    <h1>Spotify Web Playback SDK Quick Start</h1>
    <button id="togglePlay">Toggle Play</button>

    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script>
      window.onSpotifyWebPlaybackSDKReady = () => {
        const token = '[My access token]';
        const player = new Spotify.Player({
          name: 'Web Playback SDK Quick Start Player',
          getOAuthToken: (cb) => {
            cb(token);
          },
          volume: 0.5,
        });

        // Ready
        player.addListener('ready', ({ device_id }) => {
          console.log('Ready with Device ID', device_id);
        });

        // Not Ready
        player.addListener('not_ready', ({ device_id }) => {
          console.log('Device ID has gone offline', device_id);
        });

        player.addListener('initialization_error', ({ message }) => {
          console.error(message);
        });

        player.addListener('authentication_error', ({ message }) => {
          console.error(message);
        });

        player.addListener('account_error', ({ message }) => {
          console.error(message);
        });

        document.getElementById('togglePlay').onclick = function () {
          player.togglePlay();
        };

        player.connect();
      };
    </script>
  </body>
</html>
```

### 2. Player Configuration

```javascript
const player = new Spotify.Player({
  name: 'Web Playback SDK Quick Start Player', // Player name in Spotify Connect
  getOAuthToken: (cb) => {
    cb(token);
  }, // Token callback
  volume: 0.5, // Initial volume (0-1)
});
```

## React Implementation

### 1. Component Structure

```javascript
import React, { useState, useEffect } from 'react';

function WebPlayback(props) {
  const [player, setPlayer] = useState(undefined);
  const [is_paused, setPaused] = useState(false);
  const [is_active, setActive] = useState(false);
  const [current_track, setTrack] = useState(track);

  return (
    <div className="container">
      <div className="main-wrapper">{/* Player UI */}</div>
    </div>
  );
}

export default WebPlayback;
```

### 2. Track Object Structure

```javascript
const track = {
  name: '',
  album: {
    images: [{ url: '' }],
  },
  artists: [{ name: '' }],
};
```

### 3. SDK Initialization

```javascript
useEffect(() => {
  const script = document.createElement('script');
  script.src = 'https://sdk.scdn.co/spotify-player.js';
  script.async = true;

  document.body.appendChild(script);

  window.onSpotifyWebPlaybackSDKReady = () => {
    const player = new window.Spotify.Player({
      name: 'Web Playback SDK',
      getOAuthToken: (cb) => {
        cb(props.token);
      },
      volume: 0.5,
    });

    setPlayer(player);

    // Event listeners
    player.addListener('ready', ({ device_id }) => {
      console.log('Ready with Device ID', device_id);
    });

    player.addListener('not_ready', ({ device_id }) => {
      console.log('Device ID has gone offline', device_id);
    });

    player.addListener('player_state_changed', (state) => {
      if (!state) {
        return;
      }

      setTrack(state.track_window.current_track);
      setPaused(state.paused);

      player.getCurrentState().then((state) => {
        !state ? setActive(false) : setActive(true);
      });
    });

    player.connect();
  };
}, []);
```

## Event Listeners

### Core Events

```javascript
// Ready - SDK connected and ready to stream
player.addListener('ready', ({ device_id }) => {
  console.log('Ready with Device ID', device_id);
});

// Not Ready - Connection broken
player.addListener('not_ready', ({ device_id }) => {
  console.log('Device ID has gone offline', device_id);
});

// Player State Changed - Track, playback state changes
player.addListener('player_state_changed', (state) => {
  if (!state) return;

  setTrack(state.track_window.current_track);
  setPaused(state.paused);
});
```

### Error Events

```javascript
// Initialization Error
player.addListener('initialization_error', ({ message }) => {
  console.error(message);
});

// Authentication Error
player.addListener('authentication_error', ({ message }) => {
  console.error(message);
});

// Account Error
player.addListener('account_error', ({ message }) => {
  console.error(message);
});
```

## Playback Controls

### Basic Controls

```javascript
// Toggle play/pause
player.togglePlay();

// Play
player.resume();

// Pause
player.pause();

// Next track
player.nextTrack();

// Previous track
player.previousTrack();

// Set volume (0-1)
player.setVolume(0.5);

// Seek to position (in milliseconds)
player.seek(30000); // 30 seconds
```

### Control Buttons Example

```javascript
return (
  <div className="controls">
    <button
      onClick={() => {
        player.previousTrack();
      }}
    >
      &lt;&lt;
    </button>

    <button
      onClick={() => {
        player.togglePlay();
      }}
    >
      {is_paused ? 'PLAY' : 'PAUSE'}
    </button>

    <button
      onClick={() => {
        player.nextTrack();
      }}
    >
      &gt;&gt;
    </button>
  </div>
);
```

## State Management

### Current Track Display

```javascript
return (
  <div className="now-playing">
    <img
      src={current_track.album.images[0].url}
      className="now-playing__cover"
      alt=""
    />

    <div className="now-playing__side">
      <div className="now-playing__name">{current_track.name}</div>

      <div className="now-playing__artist">{current_track.artists[0].name}</div>
    </div>
  </div>
);
```

### State Getters

```javascript
// Get current playback state
player.getCurrentState().then((state) => {
  if (state) {
    console.log('Currently playing:', state.track_window.current_track.name);
    console.log('Paused:', state.paused);
    console.log('Position:', state.position);
  }
});

// Get device ID
player.getDeviceId().then((deviceId) => {
  console.log('Device ID:', deviceId);
});
```

## Mobile Support

### Safari iOS Autoplay

Safari on iOS and other mobile browsers have restrictions for autoplay behavior. When playback is transferred from other applications, the browser may block it as autoplay.

```javascript
// Call activateElement() before playback transfer
player.activateElement();
```

## Full Application Setup

### 1. Project Structure

```
spotify-web-player/
├── package.json
├── .env
├── src/
│   ├── App.js
│   ├── Login.js
│   ├── WebPlayback.js
│   └── setupProxy.js
└── server/
    └── index.js
```

### 2. Environment Variables

```bash
# .env
SPOTIFY_CLIENT_ID='your_client_id'
SPOTIFY_CLIENT_SECRET='your_client_secret'
```

### 3. Backend Authorization

```javascript
// server/index.js
const express = require('express');
const dotenv = require('dotenv');

dotenv.config();

const spotify_client_id = process.env.SPOTIFY_CLIENT_ID;
const spotify_client_secret = process.env.SPOTIFY_CLIENT_SECRET;

app.get('/auth/login', (req, res) => {
  const scope = 'streaming user-read-email user-read-private';
  const state = generateRandomString(16);

  const auth_query_parameters = new URLSearchParams({
    response_type: 'code',
    client_id: spotify_client_id,
    scope: scope,
    redirect_uri: 'http://127.0.0.1:3000/auth/callback',
    state: state,
  });

  res.redirect(
    'https://accounts.spotify.com/authorize/?' +
      auth_query_parameters.toString()
  );
});

app.get('/auth/callback', (req, res) => {
  const code = req.query.code;

  const authOptions = {
    url: 'https://accounts.spotify.com/api/token',
    form: {
      code: code,
      redirect_uri: 'http://127.0.0.1:3000/auth/callback',
      grant_type: 'authorization_code',
    },
    headers: {
      Authorization:
        'Basic ' +
        Buffer.from(spotify_client_id + ':' + spotify_client_secret).toString(
          'base64'
        ),
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    json: true,
  };

  request.post(authOptions, function (error, response, body) {
    if (!error && response.statusCode === 200) {
      const access_token = body.access_token;
      res.redirect('/');
    }
  });
});

app.get('/auth/token', (req, res) => {
  res.json({ access_token: access_token });
});
```

### 4. React App Component

```javascript
// src/App.js
import React, { useState, useEffect } from 'react';
import WebPlayback from './WebPlayback';
import Login from './Login';

function App() {
  const [token, setToken] = useState('');

  useEffect(() => {
    async function getToken() {
      const response = await fetch('/auth/token');
      const json = await response.json();
      setToken(json.access_token);
    }
    getToken();
  }, []);

  return <>{token === '' ? <Login /> : <WebPlayback token={token} />}</>;
}
```

### 5. Proxy Configuration

```javascript
// src/setupProxy.js
const { createProxyMiddleware } = require('http-proxy-middleware');

module.exports = function (app) {
  app.use(
    '/auth/**',
    createProxyMiddleware({
      target: 'http://127.0.0.1:5000',
      changeOrigin: true,
    })
  );
};
```

## Production Deployment

### 1. Build React App

```bash
npm run build
```

### 2. Serve Static Files

```javascript
// server/index.js
const path = require('path');

// Serve static files from React build
app.use(express.static(path.join(__dirname, '../build')));

// Handle React routing, return all requests to React app
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../build', 'index.html'));
});
```

## Common Issues & Solutions

### 1. Token Expiration

Access tokens expire after 1 hour. Implement token refresh:

```javascript
// Check token expiration and refresh if needed
const checkTokenExpiration = async () => {
  const response = await fetch('/auth/refresh');
  const { access_token } = await response.json();
  // Update token in state/storage
};
```

### 2. Device Not Appearing

- Ensure user has Spotify Premium
- Check that all required scopes are included
- Verify access token is valid and not expired
- Make sure user is logged into Spotify in another client

### 3. Playback Not Starting

- Call `player.activateElement()` on mobile browsers
- Ensure user has transferred playback to the web player
- Check that the track is available in user's region

## Best Practices

1. **Error Handling**: Always implement error listeners for initialization, authentication, and account errors
2. **State Management**: Use React state to track player status and current track
3. **Mobile Support**: Call `activateElement()` for mobile browsers
4. **Token Management**: Implement proper token refresh logic
5. **User Experience**: Provide clear feedback when player is connecting or has errors
6. **Performance**: Clean up event listeners in useEffect cleanup function

## Next Steps

- Implement playlist playback using Spotify Web API
- Add search functionality
- Create custom UI components
- Implement crossfade and audio effects
- Add collaborative playlist features
